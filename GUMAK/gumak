#!/usr/bin/bash
# Author: zenobit
# Description: Uses gum to provide a simple TUI
# License MIT
# shellcheck disable=SC2086,SC2207

#TODO: create another tmp file instead of rewrite previous
# copy result to clipboard ?
# Need testing, changing colors, placeholders, texts and header color etc..

#### INSTALL GUM ####
gum_install() {
	if ! command -v gum >/dev/null 2>&1; then
		echo "I need gum to work! Will try install it..."
		if [ -f /etc/os-release ]; then
			if [ -f /usr/bin/pacman ]; then
				install_gum_pacman
			elif [ -f /usr/bin/apt ]; then
				install_gum_apt
			elif [ -f /usr/bin/apk ]; then
				install_gum_apk
			elif [ -f /usr/bin/xbps-install ]; then
				install_gum_xbps
			elif [ -f /usr/bin/yum ]; then
				install_gum_yum
			elif [ -f /usr/bin/nix ]; then
				install_gum_nix
			elif [ -f /usr/bin/go ]; then
				install_gum_go
			else
				echo "Don't know how to install gum here!" && exit 1
			fi
		fi
	fi
}
install_gum_apk() {
	sudo apk add gum
}
install_gum_apt() {
	sudo mkdir -p /etc/apt/keyrings
	curl -fsSL https://repo.charm.sh/apt/gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/charm.gpg
	echo "deb [signed-by=/etc/apt/keyrings/charm.gpg] https://repo.charm.sh/apt/ * *" \
| sudo tee /etc/apt/sources.list.d/charm.list
	sudo apt update
	sudo apt install gum
}
install_gum_nix() {
	nix-env -iA nixpkgs.gum || nix run "github:charmbracelet/gum" -- --help
}
install_gum_pacman() {
	sudo pacman -S gum
}
install_gum_xbps() {
	sudo xbps-install gum
}
install_gum_yum() {
	echo '[charm]
name=Charm
baseurl=https://repo.charm.sh/yum/
enabled=1
gpgcheck=1
gpgkey=https://repo.charm.sh/yum/gpg.key' | sudo tee /etc/yum.repos.d/charm.repo
	sudo yum install gum
}
install_gum_go() {
	go install github.com/charmbracelet/gum@latest
}
gum_install

#### SETTINGS ####
progname="gum√°k"
version='0.005'
# color
c=#295340
# export gum global variables
export GUM_FILTER_INDICATOR_FOREGROUND=${c}
export GUM_FILTER_SELECTED_PREFIX_FOREGROUND=${c}
export GUM_FILTER_HEADER_FOREGROUND=${c}
export GUM_FILTER_CURSOR_TEXT_FOREGROUND=${c}
export GUM_STYLE_FOREGROUND=${c}
export GUM_STYLE_BORDER_FOREGROUND=${c}
export GUM_STYLE_BORDER=rounded
# create temp dir
tmpdir="/tmp/gumak"
mkdir -p ${tmpdir}

#### HEADERS ####
header() {
	gum style \
	--padding '0 1' \
	--align center \
	--border ${GUM_STYLE_BORDER} \
	--border-foreground=${GUM_STYLE_BORDER_FOREGROUND} \
	"$headertext"
}

#### OPTIONS ####
# choose from 16 colors
color_16() {
	choice=$(echo "[38;5;1m1[0m
[38;5;2m2[0m
[38;5;3m3[0m
[38;5;4m4[0m
[38;5;5m5[0m
[38;5;6m6[0m
[38;5;7m7[0m
[38;5;8m8[0m
[38;5;9m9[0m
[38;5;10m10[0m
[38;5;11m11[0m
[38;5;12m12[0m
[38;5;13m13[0m
[38;5;14m14[0m
[38;5;15m15[0m
[38;5;0m16[0m" | gum choose --height 16)
	c=$(echo $choice | cut -d' ' -f1)
}
# choose from 256 colors
color_256() {
	choice=$(echo "1 [48;5;1m   [0m[48;5;1m   [0m[48;5;1m   [0m
2 [48;5;2m   [0m[48;5;2m   [0m[48;5;2m   [0m
3 [48;5;3m   [0m[48;5;3m   [0m[48;5;3m   [0m
4 [48;5;4m   [0m[48;5;4m   [0m[48;5;4m   [0m
5 [48;5;5m   [0m[48;5;5m   [0m[48;5;5m   [0m
6 [48;5;6m   [0m[48;5;6m   [0m[48;5;6m   [0m
7 [48;5;7m   [0m[48;5;7m   [0m[48;5;7m   [0m
8 [48;5;8m   [0m[48;5;8m   [0m[48;5;8m   [0m
9 [48;5;9m   [0m[48;5;9m   [0m[48;5;9m   [0m
10 [48;5;10m   [0m[48;5;10m   [0m[48;5;10m   [0m
11 [48;5;11m   [0m[48;5;11m   [0m[48;5;11m   [0m
12 [48;5;12m   [0m[48;5;12m   [0m[48;5;12m   [0m
13 [48;5;13m   [0m[48;5;13m   [0m[48;5;13m   [0m
14 [48;5;14m   [0m[48;5;14m   [0m[48;5;14m   [0m
15 [48;5;15m   [0m[48;5;15m   [0m[48;5;15m   [0m
16 [48;5;16m   [0m[48;5;16m   [0m[48;5;16m   [0m
17 [48;5;17m   [0m[48;5;17m   [0m[48;5;17m   [0m
18 [48;5;18m   [0m[48;5;18m   [0m[48;5;18m   [0m
19 [48;5;19m   [0m[48;5;19m   [0m[48;5;19m   [0m
20 [48;5;20m   [0m[48;5;20m   [0m[48;5;20m   [0m
21 [48;5;21m   [0m[48;5;21m   [0m[48;5;21m   [0m
22 [48;5;22m   [0m[48;5;22m   [0m[48;5;22m   [0m
23 [48;5;23m   [0m[48;5;23m   [0m[48;5;23m   [0m
24 [48;5;24m   [0m[48;5;24m   [0m[48;5;24m   [0m
25 [48;5;25m   [0m[48;5;25m   [0m[48;5;25m   [0m
26 [48;5;26m   [0m[48;5;26m   [0m[48;5;26m   [0m
27 [48;5;27m   [0m[48;5;27m   [0m[48;5;27m   [0m
28 [48;5;28m   [0m[48;5;28m   [0m[48;5;28m   [0m
29 [48;5;29m   [0m[48;5;29m   [0m[48;5;29m   [0m
30 [48;5;30m   [0m[48;5;30m   [0m[48;5;30m   [0m
31 [48;5;31m   [0m[48;5;31m   [0m[48;5;31m   [0m
32 [48;5;32m   [0m[48;5;32m   [0m[48;5;32m   [0m
33 [48;5;33m   [0m[48;5;33m   [0m[48;5;33m   [0m
34 [48;5;34m   [0m[48;5;34m   [0m[48;5;34m   [0m
35 [48;5;35m   [0m[48;5;35m   [0m[48;5;35m   [0m
36 [48;5;36m   [0m[48;5;36m   [0m[48;5;36m   [0m
37 [48;5;37m   [0m[48;5;37m   [0m[48;5;37m   [0m
38 [48;5;38m   [0m[48;5;38m   [0m[48;5;38m   [0m
39 [48;5;39m   [0m[48;5;39m   [0m[48;5;39m   [0m
40 [48;5;40m   [0m[48;5;40m   [0m[48;5;40m   [0m
41 [48;5;41m   [0m[48;5;41m   [0m[48;5;41m   [0m
42 [48;5;42m   [0m[48;5;42m   [0m[48;5;42m   [0m
43 [48;5;43m   [0m[48;5;43m   [0m[48;5;43m   [0m
44 [48;5;44m   [0m[48;5;44m   [0m[48;5;44m   [0m
45 [48;5;45m   [0m[48;5;45m   [0m[48;5;45m   [0m
46 [48;5;46m   [0m[48;5;46m   [0m[48;5;46m   [0m
47 [48;5;47m   [0m[48;5;47m   [0m[48;5;47m   [0m
48 [48;5;48m   [0m[48;5;48m   [0m[48;5;48m   [0m
49 [48;5;49m   [0m[48;5;49m   [0m[48;5;49m   [0m
50 [48;5;50m   [0m[48;5;50m   [0m[48;5;50m   [0m
51 [48;5;51m   [0m[48;5;51m   [0m[48;5;51m   [0m
52 [48;5;52m   [0m[48;5;52m   [0m[48;5;52m   [0m
53 [48;5;53m   [0m[48;5;53m   [0m[48;5;53m   [0m
54 [48;5;54m   [0m[48;5;54m   [0m[48;5;54m   [0m
55 [48;5;55m   [0m[48;5;55m   [0m[48;5;55m   [0m
56 [48;5;56m   [0m[48;5;56m   [0m[48;5;56m   [0m
57 [48;5;57m   [0m[48;5;57m   [0m[48;5;57m   [0m
58 [48;5;58m   [0m[48;5;58m   [0m[48;5;58m   [0m
59 [48;5;59m   [0m[48;5;59m   [0m[48;5;59m   [0m
60 [48;5;60m   [0m[48;5;60m   [0m[48;5;60m   [0m
61 [48;5;61m   [0m[48;5;61m   [0m[48;5;61m   [0m
62 [48;5;62m   [0m[48;5;62m   [0m[48;5;62m   [0m
63 [48;5;63m   [0m[48;5;63m   [0m[48;5;63m   [0m
64 [48;5;64m   [0m[48;5;64m   [0m[48;5;64m   [0m
65 [48;5;65m   [0m[48;5;65m   [0m[48;5;65m   [0m
66 [48;5;66m   [0m[48;5;66m   [0m[48;5;66m   [0m
67 [48;5;67m   [0m[48;5;67m   [0m[48;5;67m   [0m
68 [48;5;68m   [0m[48;5;68m   [0m[48;5;68m   [0m
69 [48;5;69m   [0m[48;5;69m   [0m[48;5;69m   [0m
70 [48;5;70m   [0m[48;5;70m   [0m[48;5;70m   [0m
71 [48;5;71m   [0m[48;5;71m   [0m[48;5;71m   [0m
72 [48;5;72m   [0m[48;5;72m   [0m[48;5;72m   [0m
73 [48;5;73m   [0m[48;5;73m   [0m[48;5;73m   [0m
74 [48;5;74m   [0m[48;5;74m   [0m[48;5;74m   [0m
75 [48;5;75m   [0m[48;5;75m   [0m[48;5;75m   [0m
76 [48;5;76m   [0m[48;5;76m   [0m[48;5;76m   [0m
77 [48;5;77m   [0m[48;5;77m   [0m[48;5;77m   [0m
78 [48;5;78m   [0m[48;5;78m   [0m[48;5;78m   [0m
79 [48;5;79m   [0m[48;5;79m   [0m[48;5;79m   [0m
80 [48;5;80m   [0m[48;5;80m   [0m[48;5;80m   [0m
81 [48;5;81m   [0m[48;5;81m   [0m[48;5;81m   [0m
82 [48;5;82m   [0m[48;5;82m   [0m[48;5;82m   [0m
83 [48;5;83m   [0m[48;5;83m   [0m[48;5;83m   [0m
84 [48;5;84m   [0m[48;5;84m   [0m[48;5;84m   [0m
85 [48;5;85m   [0m[48;5;85m   [0m[48;5;85m   [0m
86 [48;5;86m   [0m[48;5;86m   [0m[48;5;86m   [0m
87 [48;5;87m   [0m[48;5;87m   [0m[48;5;87m   [0m
88 [48;5;88m   [0m[48;5;88m   [0m[48;5;88m   [0m
89 [48;5;89m   [0m[48;5;89m   [0m[48;5;89m   [0m
90 [48;5;90m   [0m[48;5;90m   [0m[48;5;90m   [0m
91 [48;5;91m   [0m[48;5;91m   [0m[48;5;91m   [0m
92 [48;5;92m   [0m[48;5;92m   [0m[48;5;92m   [0m
93 [48;5;93m   [0m[48;5;93m   [0m[48;5;93m   [0m
94 [48;5;94m   [0m[48;5;94m   [0m[48;5;94m   [0m
95 [48;5;95m   [0m[48;5;95m   [0m[48;5;95m   [0m
96 [48;5;96m   [0m[48;5;96m   [0m[48;5;96m   [0m
97 [48;5;97m   [0m[48;5;97m   [0m[48;5;97m   [0m
98 [48;5;98m   [0m[48;5;98m   [0m[48;5;98m   [0m
99 [48;5;99m   [0m[48;5;99m   [0m[48;5;99m   [0m
100 [48;5;100m   [0m[48;5;100m   [0m[48;5;100m   [0m
101 [48;5;101m   [0m[48;5;101m   [0m[48;5;101m   [0m
102 [48;5;102m   [0m[48;5;102m   [0m[48;5;102m   [0m
103 [48;5;103m   [0m[48;5;103m   [0m[48;5;103m   [0m
104 [48;5;104m   [0m[48;5;104m   [0m[48;5;104m   [0m
105 [48;5;105m   [0m[48;5;105m   [0m[48;5;105m   [0m
106 [48;5;106m   [0m[48;5;106m   [0m[48;5;106m   [0m
107 [48;5;107m   [0m[48;5;107m   [0m[48;5;107m   [0m
108 [48;5;108m   [0m[48;5;108m   [0m[48;5;108m   [0m
109 [48;5;109m   [0m[48;5;109m   [0m[48;5;109m   [0m
110 [48;5;110m   [0m[48;5;110m   [0m[48;5;110m   [0m
111 [48;5;111m   [0m[48;5;111m   [0m[48;5;111m   [0m
112 [48;5;112m   [0m[48;5;112m   [0m[48;5;112m   [0m
113 [48;5;113m   [0m[48;5;113m   [0m[48;5;113m   [0m
114 [48;5;114m   [0m[48;5;114m   [0m[48;5;114m   [0m
115 [48;5;115m   [0m[48;5;115m   [0m[48;5;115m   [0m
116 [48;5;116m   [0m[48;5;116m   [0m[48;5;116m   [0m
117 [48;5;117m   [0m[48;5;117m   [0m[48;5;117m   [0m
118 [48;5;118m   [0m[48;5;118m   [0m[48;5;118m   [0m
119 [48;5;119m   [0m[48;5;119m   [0m[48;5;119m   [0m
120 [48;5;120m   [0m[48;5;120m   [0m[48;5;120m   [0m
121 [48;5;121m   [0m[48;5;121m   [0m[48;5;121m   [0m
122 [48;5;122m   [0m[48;5;122m   [0m[48;5;122m   [0m
123 [48;5;123m   [0m[48;5;123m   [0m[48;5;123m   [0m
124 [48;5;124m   [0m[48;5;124m   [0m[48;5;124m   [0m
125 [48;5;125m   [0m[48;5;125m   [0m[48;5;125m   [0m
126 [48;5;126m   [0m[48;5;126m   [0m[48;5;126m   [0m
127 [48;5;127m   [0m[48;5;127m   [0m[48;5;127m   [0m
128 [48;5;128m   [0m[48;5;128m   [0m[48;5;128m   [0m
129 [48;5;129m   [0m[48;5;129m   [0m[48;5;129m   [0m
130 [48;5;130m   [0m[48;5;130m   [0m[48;5;130m   [0m
131 [48;5;131m   [0m[48;5;131m   [0m[48;5;131m   [0m
132 [48;5;132m   [0m[48;5;132m   [0m[48;5;132m   [0m
133 [48;5;133m   [0m[48;5;133m   [0m[48;5;133m   [0m
134 [48;5;134m   [0m[48;5;134m   [0m[48;5;134m   [0m
135 [48;5;135m   [0m[48;5;135m   [0m[48;5;135m   [0m
136 [48;5;136m   [0m[48;5;136m   [0m[48;5;136m   [0m
137 [48;5;137m   [0m[48;5;137m   [0m[48;5;137m   [0m
138 [48;5;138m   [0m[48;5;138m   [0m[48;5;138m   [0m
139 [48;5;139m   [0m[48;5;139m   [0m[48;5;139m   [0m
140 [48;5;140m   [0m[48;5;140m   [0m[48;5;140m   [0m
141 [48;5;141m   [0m[48;5;141m   [0m[48;5;141m   [0m
142 [48;5;142m   [0m[48;5;142m   [0m[48;5;142m   [0m
143 [48;5;143m   [0m[48;5;143m   [0m[48;5;143m   [0m
144 [48;5;144m   [0m[48;5;144m   [0m[48;5;144m   [0m
145 [48;5;145m   [0m[48;5;145m   [0m[48;5;145m   [0m
146 [48;5;146m   [0m[48;5;146m   [0m[48;5;146m   [0m
147 [48;5;147m   [0m[48;5;147m   [0m[48;5;147m   [0m
148 [48;5;148m   [0m[48;5;148m   [0m[48;5;148m   [0m
149 [48;5;149m   [0m[48;5;149m   [0m[48;5;149m   [0m
150 [48;5;150m   [0m[48;5;150m   [0m[48;5;150m   [0m
151 [48;5;151m   [0m[48;5;151m   [0m[48;5;151m   [0m
152 [48;5;152m   [0m[48;5;152m   [0m[48;5;152m   [0m
153 [48;5;153m   [0m[48;5;153m   [0m[48;5;153m   [0m
154 [48;5;154m   [0m[48;5;154m   [0m[48;5;154m   [0m
155 [48;5;155m   [0m[48;5;155m   [0m[48;5;155m   [0m
156 [48;5;156m   [0m[48;5;156m   [0m[48;5;156m   [0m
157 [48;5;157m   [0m[48;5;157m   [0m[48;5;157m   [0m
158 [48;5;158m   [0m[48;5;158m   [0m[48;5;158m   [0m
159 [48;5;159m   [0m[48;5;159m   [0m[48;5;159m   [0m
160 [48;5;160m   [0m[48;5;160m   [0m[48;5;160m   [0m
161 [48;5;161m   [0m[48;5;161m   [0m[48;5;161m   [0m
162 [48;5;162m   [0m[48;5;162m   [0m[48;5;162m   [0m
163 [48;5;163m   [0m[48;5;163m   [0m[48;5;163m   [0m
164 [48;5;164m   [0m[48;5;164m   [0m[48;5;164m   [0m
165 [48;5;165m   [0m[48;5;165m   [0m[48;5;165m   [0m
166 [48;5;166m   [0m[48;5;166m   [0m[48;5;166m   [0m
167 [48;5;167m   [0m[48;5;167m   [0m[48;5;167m   [0m
168 [48;5;168m   [0m[48;5;168m   [0m[48;5;168m   [0m
169 [48;5;169m   [0m[48;5;169m   [0m[48;5;169m   [0m
170 [48;5;170m   [0m[48;5;170m   [0m[48;5;170m   [0m
171 [48;5;171m   [0m[48;5;171m   [0m[48;5;171m   [0m
172 [48;5;172m   [0m[48;5;172m   [0m[48;5;172m   [0m
173 [48;5;173m   [0m[48;5;173m   [0m[48;5;173m   [0m
174 [48;5;174m   [0m[48;5;174m   [0m[48;5;174m   [0m
175 [48;5;175m   [0m[48;5;175m   [0m[48;5;175m   [0m
176 [48;5;176m   [0m[48;5;176m   [0m[48;5;176m   [0m
177 [48;5;177m   [0m[48;5;177m   [0m[48;5;177m   [0m
178 [48;5;178m   [0m[48;5;178m   [0m[48;5;178m   [0m
179 [48;5;179m   [0m[48;5;179m   [0m[48;5;179m   [0m
180 [48;5;180m   [0m[48;5;180m   [0m[48;5;180m   [0m
181 [48;5;181m   [0m[48;5;181m   [0m[48;5;181m   [0m
182 [48;5;182m   [0m[48;5;182m   [0m[48;5;182m   [0m
183 [48;5;183m   [0m[48;5;183m   [0m[48;5;183m   [0m
184 [48;5;184m   [0m[48;5;184m   [0m[48;5;184m   [0m
185 [48;5;185m   [0m[48;5;185m   [0m[48;5;185m   [0m
186 [48;5;186m   [0m[48;5;186m   [0m[48;5;186m   [0m
187 [48;5;187m   [0m[48;5;187m   [0m[48;5;187m   [0m
188 [48;5;188m   [0m[48;5;188m   [0m[48;5;188m   [0m
189 [48;5;189m   [0m[48;5;189m   [0m[48;5;189m   [0m
190 [48;5;190m   [0m[48;5;190m   [0m[48;5;190m   [0m
191 [48;5;191m   [0m[48;5;191m   [0m[48;5;191m   [0m
192 [48;5;192m   [0m[48;5;192m   [0m[48;5;192m   [0m
193 [48;5;193m   [0m[48;5;193m   [0m[48;5;193m   [0m
194 [48;5;194m   [0m[48;5;194m   [0m[48;5;194m   [0m
195 [48;5;195m   [0m[48;5;195m   [0m[48;5;195m   [0m
196 [48;5;196m   [0m[48;5;196m   [0m[48;5;196m   [0m
197 [48;5;197m   [0m[48;5;197m   [0m[48;5;197m   [0m
198 [48;5;198m   [0m[48;5;198m   [0m[48;5;198m   [0m
199 [48;5;199m   [0m[48;5;199m   [0m[48;5;199m   [0m
200 [48;5;200m   [0m[48;5;200m   [0m[48;5;200m   [0m
201 [48;5;201m   [0m[48;5;201m   [0m[48;5;201m   [0m
202 [48;5;202m   [0m[48;5;202m   [0m[48;5;202m   [0m
203 [48;5;203m   [0m[48;5;203m   [0m[48;5;203m   [0m
204 [48;5;204m   [0m[48;5;204m   [0m[48;5;204m   [0m
205 [48;5;205m   [0m[48;5;205m   [0m[48;5;205m   [0m
206 [48;5;206m   [0m[48;5;206m   [0m[48;5;206m   [0m
207 [48;5;207m   [0m[48;5;207m   [0m[48;5;207m   [0m
208 [48;5;208m   [0m[48;5;208m   [0m[48;5;208m   [0m
209 [48;5;209m   [0m[48;5;209m   [0m[48;5;209m   [0m
210 [48;5;210m   [0m[48;5;210m   [0m[48;5;210m   [0m
211 [48;5;211m   [0m[48;5;211m   [0m[48;5;211m   [0m
212 [48;5;212m   [0m[48;5;212m   [0m[48;5;212m   [0m
213 [48;5;213m   [0m[48;5;213m   [0m[48;5;213m   [0m
214 [48;5;214m   [0m[48;5;214m   [0m[48;5;214m   [0m
215 [48;5;215m   [0m[48;5;215m   [0m[48;5;215m   [0m
216 [48;5;216m   [0m[48;5;216m   [0m[48;5;216m   [0m
217 [48;5;217m   [0m[48;5;217m   [0m[48;5;217m   [0m
218 [48;5;218m   [0m[48;5;218m   [0m[48;5;218m   [0m
219 [48;5;219m   [0m[48;5;219m   [0m[48;5;219m   [0m
220 [48;5;220m   [0m[48;5;220m   [0m[48;5;220m   [0m
221 [48;5;221m   [0m[48;5;221m   [0m[48;5;221m   [0m
222 [48;5;222m   [0m[48;5;222m   [0m[48;5;222m   [0m
223 [48;5;223m   [0m[48;5;223m   [0m[48;5;223m   [0m
224 [48;5;224m   [0m[48;5;224m   [0m[48;5;224m   [0m
225 [48;5;225m   [0m[48;5;225m   [0m[48;5;225m   [0m
226 [48;5;226m   [0m[48;5;226m   [0m[48;5;226m   [0m
227 [48;5;227m   [0m[48;5;227m   [0m[48;5;227m   [0m
228 [48;5;228m   [0m[48;5;228m   [0m[48;5;228m   [0m
229 [48;5;229m   [0m[48;5;229m   [0m[48;5;229m   [0m
230 [48;5;230m   [0m[48;5;230m   [0m[48;5;230m   [0m
231 [48;5;231m   [0m[48;5;231m   [0m[48;5;231m   [0m
232 [48;5;232m   [0m[48;5;232m   [0m[48;5;232m   [0m
233 [48;5;233m   [0m[48;5;233m   [0m[48;5;233m   [0m
234 [48;5;234m   [0m[48;5;234m   [0m[48;5;234m   [0m
235 [48;5;235m   [0m[48;5;235m   [0m[48;5;235m   [0m
236 [48;5;236m   [0m[48;5;236m   [0m[48;5;236m   [0m
237 [48;5;237m   [0m[48;5;237m   [0m[48;5;237m   [0m
238 [48;5;238m   [0m[48;5;238m   [0m[48;5;238m   [0m
239 [48;5;239m   [0m[48;5;239m   [0m[48;5;239m   [0m
240 [48;5;240m   [0m[48;5;240m   [0m[48;5;240m   [0m
241 [48;5;241m   [0m[48;5;241m   [0m[48;5;241m   [0m
242 [48;5;242m   [0m[48;5;242m   [0m[48;5;242m   [0m
243 [48;5;243m   [0m[48;5;243m   [0m[48;5;243m   [0m
244 [48;5;244m   [0m[48;5;244m   [0m[48;5;244m   [0m
245 [48;5;245m   [0m[48;5;245m   [0m[48;5;245m   [0m
246 [48;5;246m   [0m[48;5;246m   [0m[48;5;246m   [0m
247 [48;5;247m   [0m[48;5;247m   [0m[48;5;247m   [0m
248 [48;5;248m   [0m[48;5;248m   [0m[48;5;248m   [0m
249 [48;5;249m   [0m[48;5;249m   [0m[48;5;249m   [0m
250 [48;5;250m   [0m[48;5;250m   [0m[48;5;250m   [0m
251 [48;5;251m   [0m[48;5;251m   [0m[48;5;251m   [0m
252 [48;5;252m   [0m[48;5;252m   [0m[48;5;252m   [0m
253 [48;5;253m   [0m[48;5;253m   [0m[48;5;253m   [0m
254 [48;5;254m   [0m[48;5;254m   [0m[48;5;254m   [0m
255 [48;5;255m   [0m[48;5;255m   [0m[48;5;255m   [0m
256 [48;5;0m   [0m[48;5;0m   [0m[48;5;0m   [0m" | gum choose --height 16)
	c=$(echo $choice | cut -d' ' -f1)
	#cat sorted_colors | gum choose --height 16
}
# pick color (xcolor yad zenity)
color_picker() {
	choice=$(gum choose "xcolor" "yad" "zenity")
	case $choice in
		xcolor) c=$(xcolor);;
		yad) c=$(yad --color);;
		zenity) c=$(zenity --color-selection --show-palette);;
	esac
}
# change color menu
change_color() {
		height=5
		start=$(echo "random
color picker
write
16 colors
256 colors" | gum filter --no-fuzzy --header "Change color..." --height $height)
	# shellcheck disable=SC2016
	case $start in
		'random' ) c='$(( RANDOM % 255 + 1 ))';;
		'color picker' ) color_picker;;
		'write' ) c=$(gum input --header="Enter color value");;
		'16 colors' ) color_16;;
		'256 colors' ) color_256;;
	esac
}
# change border menu
change_borders() {
	BORDER=$(echo "none
hidden
normal
rounded
thick
double" | gum filter --no-fuzzy --header "Change borders style..."  --height 7)
	if [ ${ch} == '--border="none"' ]; then
		if [ -n "${BORDER}" ]; then
			echo -n "--border=\"$BORDER\" " >> ${tmp}
			export GUM_STYLE_BORDER=${BORDER}
			style_menu
		fi
	elif [ ${ch} == '-b' ]; then
		if [ -n "${BORDER}" ]; then
			echo -n "-b $BORDER " >> ${tmp}
			export GUM_STYLE_BORDER=${BORDER}
			style_menu
		fi
	fi
}
# change spinner menu
change_spinner() {
	spinner=$(echo "line
dot
minidot
jump
pulse
points
globe
moon
monkey
meter
hamburger" | gum filter --no-fuzzy --header "Change spinner..." --height 11)
	if [ -n "${spinner}" ]; then
		gum spin -s ${spinner} sleep 3
		gum confirm "Use this one?" && go="yes" || go=""
		if [ -n "${go}" ]; then
			echo -n "-s $spinner " >> ${tmp}
			export GUM_SPIN_SPINNER=${spinner}
			spin_menu
		else
			change_spinner
		fi
	fi
}
# clear temp files
clear_tmps() {
	gum confirm --affirmative="Yes" --prompt.foreground="" "Really delete this files?
$(gum style --bold ${tmpdir}/tmp-*)" && rm -fv ${tmpdir}/tmp-*
}

#### HELP #### #TODO
_help_me() {
	proghead=$(gum style --border rounded --align center --bold --width 23 "${progname} ${version}")
	helpmsg=$(gum style --border rounded --align center --border-foreground="${c}" "\
 ${progname} helps you quickly generate gum TUI commands for your bash script.

In filter menus use keyboard for filtering.
Ctrl +C will stop
Ctrl +D will confirm changes (write)

Just run it anywhere. And you will instantly know what to do..
Try some options and see ouput on screen, also saved to temp folder.
(/tmp/gumak/)

 If you run same choice again it will rewrite saved commands.
(eq. If i run choose option twice, second run will overwrite tmp-choose from first run, others stay untouched)

If you exit, commands are still stored in temp folder.
Also all commands are copied to one file /tmp/gumak/tmp
for you to copy them, or you can do that directly from terminal output

For now are commands rough. Not all of them works as generated. (Will be improved)
So user needs to fill and repair missed parts.
And of course implement in own script...

PS: Why I am doing this? Because i wanna create TUIs for everything.
    coreutils enhance to TUIutils etc..")
	gum join --vertical --align center "$proghead" "$helpmsg"

}

#### MENUS ####
gum_() {
	show_results
	headertext=$(gum style \
	--border rounded \
	--align center "\
$(gum style ${progname}) TUI for $(gum -v)
A tool for [38;5;212mglamorous[0m shell scripts.
Usage: gum <command>")
	header
	h=17
	choice=$(echo "\
CLEAR    Will delete all temp files
choose   Choose an option from a list of choices
confirm  Ask a user to confirm an action
file     Pick a file from a folder
filter   Filter items from a list
format   Format a string using a template
input    Prompt for some input
join     Join text vertically or horizontally
pager    Scroll through a file
spin     Display spinner while running a command
style    Apply coloring, borders, spacing to text
table    Render a table of data
write    Prompt for long-form text
log      Log messages to output
HELP     Show help message
EXIT     Quit ${progname}" | gum filter --no-fuzzy --height ${h})
	ch=$(echo ${choice} | cut -d' ' -f1)
	if [ ${ch} == 'EXIT' ]; then
		echo "Goodbye"
	elif [ ${ch} == 'CLEAR' ]; then
		echo "Temp files deleted"
	elif [ ${ch} == 'HELP' ]; then
		echo "Let's create some TUIs later?'"
	else
		echo -n "${ch} " > "$tmpdir/tmp-$ch"
	fi
}
# choose #TODO height, cursor, header, prefixes, selected, timeout, limit, colors
choose_header() {
	tmp="$tmpdir/tmp-choose"
	headertext="Choose an option from a list of choices

Usage: gum choose [<options> ...]

Arguments:
  [<options> ...]    Options to choose from."
}
choose_menu() {
	h=18
	choice=$(echo "\
ENOUGH back to main menu  Stop choosing choose
--ordered                 Maintain the order of the selected options (\$GUM_CHOOSE_ORDERED)
--height=10               Height of the list (\$GUM_CHOOSE_HEIGHT)
--cursor=\"> \"             Prefix to show on item that corresponds to the cursor position (\$GUM_CHOOSE_CURSOR)
--header=\"\"               Header value (\$GUM_CHOOSE_HEADER)
--cursor-prefix=\"‚óã \"      Prefix to show on the cursor item (hidden if limit is 1) (\$GUM_CHOOSE_CURSOR_PREFIX)
--selected-prefix=\"‚óâ \"    Prefix to show on selected items (hidden if limit is 1) (\$GUM_CHOOSE_SELECTED_PREFIX)
--unselected-prefix=\"‚óã \"  Prefix to show on unselected items (hidden if limit is 1) (\$GUM_CHOOSE_UNSELECTED_PREFIX)
--selected=,...           Options that should start as selected (\$GUM_CHOOSE_SELECTED)
--timeout=0               Timeout until choose returns selected element (\$GUM_CCHOOSE_TIMEOUT)
--limit=1                 Maximum number of options to pick
--no-limit                Pick unlimited number of options (ignores limit)
--select-if-one           Select the given option if there is only one
--cursor.foreground=\"\${c}\"    Foreground Color (\$GUM_CHOOSE_CURSOR_FOREGROUND)
--header.foreground=\"\${c}\"    Foreground Color (\$GUM_CHOOSE_HEADER_FOREGROUND)
--item.foreground=\"\${c}\"      Foreground Color (\$GUM_CHOOSE_ITEM_FOREGROUND)
--selected.foreground=\"\${c}\"  Foreground Color (\$GUM_CHOOSE_SELECTED_FOREGROUND)" | gum filter --no-fuzzy --header "Choosed: $(cat ${tmp})" --height ${h})
	ch=$(echo ${choice} | cut -d' ' -f1)
	if [ ${ch} == 'ENOUGH' ]; then
		echo -e "\n" >> ${tmp}
		echo -e "\nUsing:\n gum $(cat ${tmp})\n"
		arguments=($(cat ${tmp}))
		gum "${arguments[@]}" XXXX YYYY #"$(gum file --file=no --directory)"
	else
		echo -n "${ch} " >> ${tmp}
		choose_menu
	fi
}
# confirm #TODO yes, no, timeout, prompt, colors
confirm_header() {
	tmp="$tmpdir/tmp-confirm"
	headertext="Ask a user to confirm an action

Usage: gum confirm [<prompt>]

Arguments:
  [<prompt>]    Prompt to display."
}
confirm_menu() {
	h=9
	choice=$(echo "\
ENOUGH back to main menu  Stop choosing confirm
--default                 Default confirmation action
--affirmative=\"Yes\"       The title of the affirmative action
--negative=\"No\"           The title of the negative action
--timeout=0               Timeout until confirm returns selected value or default if provided (\$GUM_CONFIRM_TIMEOUT)
--prompt.foreground=\"\"         Foreground Color (\$GUM_CONFIRM_PROMPT_FOREGROUND)
--selected.foreground=\"\${c}\"    Foreground Color (\$GUM_CONFIRM_SELECTED_FOREGROUND)
--unselected.foreground=\"\${c}\"  Foreground Color (\$GUM_CONFIRM_UNSELECTED_FOREGROUND)" | gum filter --no-fuzzy --header "Choosed: $(cat ${tmp})" --height ${h})
	ch=$(echo ${choice} | cut -d' ' -f1)
	if [ ${ch} == 'ENOUGH' ]; then
		echo -e "\n" >> ${tmp}
		echo -e "\nUsing:\n gum $(cat ${tmp})\n"
		arguments=($(cat ${tmp}))
		gum "${arguments[@]}" XXXX #"$(gum file --file=no --directory)"
	else
		echo -n "${ch} " >> ${tmp}
		confirm_menu
	fi
}
# file #TODO cursor, height, timeout, colors
file_header() {
	tmp="$tmpdir/tmp-file"
	headertext="Pick a file from a folder

Usage: gum file [<path>]

Arguments:
  [<path>]    The path to the folder to begin traversing (\$GUM_FILE_PATH)"
}
file_menu() {
	h=15
	choice=$(echo "\
ENOUGH back to main menu  Stop choosing file
-c --cursor=\">\"           The cursor character (\$GUM_FILE_CURSOR)
-a --all                  Show hidden and 'dot' files (\$GUM_FILE_ALL)
--file                    Allow files selection (\$GUM_FILE_FILE)
--directory               Allow directories selection (\$GUM_FILE_DIRECTORY)
--height=0                Maximum number of files to display (\$GUM_FILE_HEIGHT)
--timeout=0               Timeout until command aborts without a selection(\$GUM_FILE_TIMEOUT)
--cursor.foreground=\"\${c}\"       Foreground Color (\$GUM_FILE_CURSOR_FOREGROUND)
--symlink.foreground=\"\${c}\"      Foreground Color (\$GUM_FILE_SYMLINK_FOREGROUND)
--directory.foreground=\"\${c}\"    Foreground Color (\$GUM_FILE_DIRECTORY_FOREGROUND)
--file.foreground=\"\${c}\"         Foreground Color (\$GUM_FILE_FILE_FOREGROUND)
--permissions.foreground=\"\${c}\"  Foreground Color (\$GUM_FILE_PERMISSIONS_FOREGROUND)
--selected.foreground=\"\${c}\"     Foreground Color (\$GUM_FILE_SELECTED_FOREGROUND)
--file-size.foreground=\"\${c}\"    Foreground Color (\$GUM_FILE_FILE_SIZE_FOREGROUND)" | gum filter --no-fuzzy --header "Choosed: $(cat ${tmp})" --height ${h})
	ch=$(echo ${choice} | cut -d' ' -f1)
	if [ ${ch} == 'ENOUGH' ]; then
		echo -e "\n" >> ${tmp}
		echo -e "\nUsing:\n gum $(cat ${tmp})\n"
		arguments=($(cat ${tmp}))
		gum "${arguments[@]}" #"$(gum file --file=no --directory)"
	else
		echo -n "${ch} " >> ${tmp}
		file_menu
	fi
}
# filter #TODO indicator, prefixes, header, placeholder, prompt, width, height, value, fuzzy, sort, timeout, limit, strict, colors
filter_header() {
	tmp="$tmpdir/tmp-filter"
	headertext="Filter items from a list

Usage: gum filter [<options> ...]

Arguments:
  [<options> ...]    Options to filter."
}
filter_menu() {
	h=27
	choice=$(echo "\
ENOUGH back to main menu   Stop choosing filter
--indicator=\"‚Ä¢\"            Character for selection (\$GUM_FILTER_INDICATOR)
--selected-prefix=\" ‚óâ \"    Character to indicate selected items (hidden if limit is 1) (\$GUM_FILTER_SELECTED_PREFIX)
--unselected-prefix=\" ‚óã \"  Character to indicate unselected items (hidden if limit is 1) (\$GUM_FILTER_UNSELECTED_PREFIX)
--header=\"\"                Header value (\$GUM_FILTER_HEADER)
--placeholder=\"Filter...\"  Placeholder value (\$GUM_FILTER_PLACEHOLDER)
--prompt=\"> \"              Prompt to display (\$GUM_FILTER_PROMPT)
--width=20                 Input width (\$GUM_FILTER_WIDTH)
--height=0                 Input height (\$GUM_FILTER_HEIGHT)
--value=\"\"                 Initial filter value (\$GUM_FILTER_VALUE)
--reverse                  Display from the bottom of the screen (\$GUM_FILTER_REVERSE)
--[no-]fuzzy               Enable fuzzy matching (\$GUM_FILTER_FUZZY)
--[no-]sort                Sort the results (\$GUM_FILTER_SORT)
--timeout=0                Timeout until filter command aborts (\$GUM_FILTER_TIMEOUT)
--indicator.foreground=\"\${c}\"           Foreground Color (\$GUM_FILTER_INDICATOR_FOREGROUND)
--selected-indicator.foreground=\"\${c}\"  Foreground Color (\$GUM_FILTER_SELECTED_PREFIX_FOREGROUND)
--unselected-prefix.foreground=\"\${c}\"   Foreground Color (\$GUM_FILTER_UNSELECTED_PREFIX_FOREGROUND)
--header.foreground=\"\${c}\"              Foreground Color (\$GUM_FILTER_HEADER_FOREGROUND)
--text.foreground=\"\${c}\"                Foreground Color (\$GUM_FILTER_TEXT_FOREGROUND)
--cursor-text.foreground=\"\${c}\"         Foreground Color (\$GUM_FILTER_CURSOR_TEXT_FOREGROUND)
--match.foreground=\"\${c}\"               Foreground Color (\$GUM_FILTER_MATCH_FOREGROUND)
--prompt.foreground=\"\${c}\"              Foreground Color (\$GUM_FILTER_PROMPT_FOREGROUND)
--limit=1          Maximum number of options to pick
--no-limit         Pick unlimited number of options (ignores limit)
--select-if-one    Select the given option if there is only one
--[no-]strict      Only returns if anything matched. Otherwise return Filter" | gum filter --no-fuzzy --header "Choosed: $(cat ${tmp})" --height ${h})
	ch=$(echo ${choice} | cut -d' ' -f1)
	#if [ ${ch} == 'ENOUGH' ]; then
		#echo -e "\n" >> ${tmp}
		#echo -e "\nUsing:\n gum $(cat ${tmp})\n"
		#arguments=($(cat ${tmp}))
		#gum "${arguments[@]}" #"$(gum file --file=no --directory)"
		#header
	#else
		#echo -n "${ch} " >> ${tmp}
		#header
		#filter_menu
	#fi
	if [ ${ch} == 'ENOUGH' ]; then
		echo -e "\n" >> ${tmp}
		echo -e "\nUsing:\n gum $(cat ${tmp})\n"
		arguments=($(cat ${tmp}))
		gum "${arguments[@]}" #"$(gum file --file=no --directory)"
	else
		if [[ ${ch} == *\" ]]; then
			rest_of_line=$(echo ${choice} | cut -d' ' -f2- | cut -d'"' -f1)
			echo -n "${ch}${rest_of_line} " >> ${tmp}
		else
			echo -n "${ch} " >> ${tmp}
		fi
		filter_menu
	fi
}
# format #TODO theme, language, type
format_header() {
	tmp="$tmpdir/tmp-format"
	headertext="Format a string using a template

Usage: gum format [<template> ...]

Arguments:
  [<template> ...]    Template string to format (can also be provided via stdin)"
}
format_menu() {
	h=5
	choice=$(echo "\
ENOUGH back to main menu  Stop choosing format
--theme=\"pink\"            Glamour theme to use for markdown formatting (\$GUM_FORMAT_THEME)
-l --language=\"\"          Programming language to parse code (\$GUM_FORMAT_LANGUAGE)
-t --type=\"markdown\"      Format to use (markdown,template,code,emoji) (\$GUM_FORMAT_TYPE)" | gum filter --no-fuzzy --header "Choosed: $(cat ${tmp})" --height ${h})
	ch=$(echo ${choice} | cut -d' ' -f1)
	if [ ${ch} == 'ENOUGH' ]; then
		echo -e "\n" >> ${tmp}
		echo -e "\nUsing:\n gum $(cat ${tmp})\n"
		arguments=($(cat ${tmp}))
		gum "${arguments[@]}" "Here is some random text" #"$(gum file --file=no --directory)"
	else
		echo -n "${ch} " >> ${tmp}
		format_menu
	fi
}
# input #TODO placeholder, prompt, cursor.mode, value, limit, width, header, colors
input_header() {
	tmp="$tmpdir/tmp-input"
	headertext="Prompt for some input

Usage: gum input"
}
input_menu() {
	h=14
	choice=$(echo "\
ENOUGH back to main menu           Stop choosing input
--placeholder=\"Type something...\"  Placeholder value (\$GUM_INPUT_PLACEHOLDER)
--prompt=\"> \"                      Prompt to display (\$GUM_INPUT_PROMPT)
--cursor.mode=\"blink\"              Cursor mode (\$GUM_INPUT_CURSOR_MODE)
--value=\"\"                         Initial value (can also be passed via stdin)
--char-limit=400                   Maximum value length (0 for no limit)
--width=40                         Input width (0 for terminal width) (\$GUM_INPUT_WIDTH)
--password                         Mask input characters
--header=\"\"                        Header value (\$GUM_INPUT_HEADER)
--timeout=0                        Timeout until input aborts (\$GUM_INPUT_TIMEOUT)
--prompt.foreground=\"\${c}\"  Foreground Color (\$GUM_INPUT_PROMPT_FOREGROUND)
--cursor.foreground=\"\${c}\"  Foreground Color (\$GUM_INPUT_CURSOR_FOREGROUND)
--header.foreground=\"\${c}\"  Foreground Color (\$GUM_INPUT_HEADER_FOREGROUND)" | gum filter --no-fuzzy --header "Choosed: $(cat ${tmp})" --height ${h})
	ch=$(echo ${choice} | cut -d' ' -f1)
	if [ ${ch} == 'ENOUGH' ]; then
		echo -e "\n" >> ${tmp}
		echo -e "\nUsing:\n gum $(cat ${tmp})\n"
		arguments=($(cat ${tmp}))
		gum "${arguments[@]}" #"$(gum file --file=no --directory)"
	else
		echo -n "${ch} " >> ${tmp}
		input_menu
	fi
}
# join #TODO align, loop?
join_header() {
	tmp="$tmpdir/tmp-join"
	headertext="Join text vertically or horizontally

Usage: gum join <text> ...

Arguments:
  <text> ...    Text to join."
}
join_menu() {
	h=5
	choice=$(echo "\
ENOUGH back to main menu  Stop choosing join
--align=\"left\"            Text alignment
--horizontal              Join (potentially multi-line) strings horizontally
--vertical                Join (potentially multi-line) strings vertically" | gum filter --no-fuzzy --header "Choosed: $(cat ${tmp})" --height ${h})
	ch=$(echo ${choice} | cut -d' ' -f1)
	if [ ${ch} == 'ENOUGH' ]; then
		echo -e "\n" >> ${tmp}
		echo -e "\nUsing:\n gum $(cat ${tmp})\n"
		arguments=($(cat ${tmp}))
		gum "${arguments[@]}" XXXX YYYY #"$(gum file --file=no --directory)"
	else
		echo -n "${ch} " >> ${tmp}
		join_menu
	fi
}
# log #TODO formatter, level, prefix, time, colors
log_header() {
	tmp="$tmpdir/tmp-log"
	headertext="Log messages to output

Usage: gum log <text> ...

Arguments:
  <text> ...    Text to log"
}
log_menu() {
	h=16
	choice=$(echo "\
ENOUGH back to main menu  Stop choosing log
-o --file=STRING          Log to file
-f --format               Format message using printf
--formatter=\"text\"        The log formatter to use
-l --level=\"none\"         The log level to use
--prefix=STRING           Prefix to print before the message
-s --structured           Use structured logging
-t --time=\"\"              The time format to use (kitchen, layout, ansic, rfc822, etc...)
--level.foreground=\"\${c}\"      Foreground Color (\$GUM_LOG_LEVEL_FOREGROUND)
--time.foreground=\"\${c}\"       Foreground Color (\$GUM_LOG_TIME_FOREGROUND)
--prefix.foreground=\"\${c}\"     Foreground Color (\$GUM_LOG_PREFIX_FOREGROUND)
--message.foreground=\"\${c}\"    Foreground Color (\$GUM_LOG_MESSAGE_FOREGROUND)
--key.foreground=\"\${c}\"        Foreground Color (\$GUM_LOG_KEY_FOREGROUND)
--value.foreground=\"\${c}\"      Foreground Color (\$GUM_LOG_VALUE_FOREGROUND)
--separator.foreground=\"\${c}\"  Foreground Color (\$GUM_LOG_SEPARATOR_FOREGROUND)" | gum filter --no-fuzzy --header "Choosed: $(cat ${tmp})" --height ${h})
	ch=$(echo ${choice} | cut -d' ' -f1)
	if [ ${ch} == 'ENOUGH' ]; then
		echo -e "\n" >> ${tmp}
		echo -e "\nUsing:\n gum $(cat ${tmp})\n"
		arguments=($(cat ${tmp}))
		gum "${arguments[@]}" "#TODO" #"$(gum file --file=no --directory)"
	else
		echo -n "${ch} " >> ${tmp}
		log_menu
	fi
}
# pager #TODO timeout, colors
pager_header() {
	tmp="$tmpdir/tmp-pager"
	headertext="Scroll through a file

Usage: gum pager [<content>]

Arguments:
  [<content>]    Display content to scroll"
}
pager_menu() {
	h=10
	choice=$(echo "\
ENOUGH back to main menu  Stop choosing pager
--show-line-numbers       Show line numbers
--soft-wrap               Soft wrap lines
--timeout=0               Timeout until command exits (\$GUM_PAGER_TIMEOUT)
--foreground=\"\${c}\"                  Foreground Color (\$GUM_PAGER_FOREGROUND)
--help.foreground=\"\${c}\"             Foreground Color (\$GUM_PAGER_HELP_FOREGROUND)
--line-number.foreground=\"\${c}\"      Foreground Color (\$GUM_PAGER_LINE_NUMBER_FOREGROUND)
--match.foreground=\"\${c}\"            Foreground Color (\$GUM_PAGER_MATCH_FOREGROUND)
--match-highlight.foreground=\"\${c}\"  Foreground Color (\$GUM_PAGER_MATCH_HIGH_FOREGROUND)" | gum filter --no-fuzzy --header "Choosed: $(cat ${tmp})" --height ${h})
	ch=$(echo ${choice} | cut -d' ' -f1)
	if [ ${ch} == 'ENOUGH' ]; then
		echo -e "\n" >> ${tmp}
		echo -e "\nUsing:\n gum $(cat ${tmp})\n"
		arguments=($(cat ${tmp}))
		man bash | gum "${arguments[@]}" #"$(gum file --file=no --directory)"
	else
		echo -n "${ch} " >> ${tmp}
		pager_menu
	fi
}
# spin $TODO title, align timeout, colors
spin_header() {
	tmp="$tmpdir/tmp-spin"
	headertext="Display spinner while running a command

Usage: gum spin <command> ...

Arguments:
  <command> ...    Command to run"
}
spin_menu() {
	h=9
	choice=$(echo "\
ENOUGH back to main menu  Stop choosing spin
--show-output             Show or pipe output of command during execution (\$GUM_SPIN_SHOW_OUTPUT)
-s --spinner=\"dot\"        Spinner type (\$GUM_SPIN_SPINNER)
--title=\"Loading...\"      Text to display to user while spinning (\$GUM_SPIN_TITLE)
-a --align=\"left\"         Alignment of spinner with regard to the title (\$GUM_SPIN_ALIGN)
--timeout=0               Timeout until spin command aborts (\$GUM_SPIN_TIMEOUT)
--spinner.foreground=\"\${c}\"  Foreground Color (\$GUM_SPIN_SPINNER_FOREGROUND)
--title.foreground=\"\${c}\"    Foreground Color (\$GUM_SPIN_TITLE_FOREGROUND)" | gum filter --no-fuzzy --header "Choosed: $(cat ${tmp})" --height ${h})
	ch=$(echo ${choice} | cut -d' ' -f1)
	if [ ${ch} == 'ENOUGH' ]; then
		echo -e "\n" >> ${tmp}
		echo -e "\nUsing:\n gum $(cat ${tmp})\n"
		arguments=($(cat ${tmp}))
		gum "${arguments[@]}" sleep 3 #"$(gum file --file=no --directory)"
	elif [ ${ch} == '-s' ]; then
		change_spinner
	else
		echo -n "${ch} " >> ${tmp}
		spin_menu
	fi
}
# style #TODO align, height, width, marging, padding, colors
style_header() {
	tmp="$tmpdir/tmp-style"
	headertext="Apply coloring, borders, spacing to text

Usage: gum style [<text> ...]

Arguments:
  [<text> ...]    Text to which to apply the style"
}
style_menu() {
	h=17
	choice=$(echo "\
ENOUGH back to main menu    Stop choosing style
--foreground=\"\${c}\"         Foreground Color (\$FOREGROUND)
--background=\"\${c}\"         Background Color (\$BACKGROUND)
--border=\"none\"             Border Style (\$BORDER)
--border-background=\"\${c}\"  Border Background Color (\$BORDER_BACKGROUND)
--border-foreground=\"\${c}\"  Border Foreground Color (\$BORDER_FOREGROUND)
--align=\"left\"              Text Alignment (\$ALIGN)
--height=0                  Text height (\$HEIGHT)
--width=0                   Text width (\$WIDTH)
--margin=\"0 0\"              Text margin (\$MARGIN)
--padding=\"0 0\"             Text padding (\$PADDING)
--bold                      Bold text (\$BOLD)
--faint                     Faint text (\$FAINT)
--italic                    Italicize text (\$ITALIC)
--strikethrough             Strikethrough text (\$STRIKETHROUGH)
--underline                 Underline text (\$UNDERLINE)" | gum filter --no-fuzzy --header "Choosed: $(cat ${tmp})" --height ${h})
	ch=$(echo ${choice} | cut -d' ' -f1)
	if [ ${ch} == 'ENOUGH' ]; then
		echo -e "\n" >> ${tmp}
		echo -e "\nUsing:\n gum $(cat ${tmp})\n"
		arguments=($(cat ${tmp}))
		gum "${arguments[@]}" XXXX #"$(gum file --file=no --directory)"
	elif [ ${ch} == '--border="none"' ]; then
		change_borders
	else
		echo -n "${ch} " >> ${tmp}
		style_menu
	fi
}
# table #TODO separator, columns, widths, height, path, colors
table_header() {
	tmp="$tmpdir/tmp-table"
	headertext="Render a table of data

Usage: gum table"
}
table_menu() {
	h=13
	choice=$(echo "\
ENOUGH back to main menu  Stop choosing table
-s --separator=\",\"        Row separator
-c --columns=COLUMNS,...  Column names
-w --widths=WIDTHS,...    Column widths
--height=10               Table height
-p --print                static print
-f --file=\"\"              file path
-b --border=\"rounded\"     border style
--border.foreground=\"\${c}\"    Foreground Color (\$GUM_TABLE_BORDER_FOREGROUND)
--cell.foreground=\"\${c}\"      Foreground Color (\$GUM_TABLE_CELL_FOREGROUND)
--header.foreground=\"\${c}\"    Foreground Color (\$GUM_TABLE_HEADER_FOREGROUND)
--selected.foreground=\"\${c}\"  Foreground Color (\$GUM_TABLE_SELECTED_FOREGROUND)" | gum filter --no-fuzzy --header "Choosed: $(cat ${tmp})" --height ${h})
	ch=$(echo ${choice} | cut -d' ' -f1)
	if [ ${ch} == 'ENOUGH' ]; then
		echo -e "\n" >> ${tmp}
		echo -e "\nUsing:\n gum $(cat ${tmp})\n"
		arguments=($(cat ${tmp}))
		gum "${arguments[@]}" XXXX YYYY ZZZZ #"$(gum file --file=no --directory)"
	elif [ ${ch} == '-b' ]; then
		change_borders
	else
		echo -n "${ch} " >> ${tmp}
		table_menu
	fi
}
# write #TODO change width, height, header, placeholder, prompt, value, char-limit, cursor.mode, colors
write_header() {
	tmp="$tmpdir/tmp-write"
	headertext="Prompt for long-form text
(Ctrl + D for confirm Ctrl + C for cancel)
Usage: gum write"
}
write_menu() {
	h=21
	choice=$(echo "\
ENOUGH back to main menu            Stop choosing write
--width=50                          Text area width (0 for terminal width) (\$GUM_WRITE_WIDTH)
--height=5                          Text area height (\$GUM_WRITE_HEIGHT)
--header=\"\"                         Header value (\$GUM_WRITE_HEADER)
--placeholder=\"Write something...\"  Placeholder value (\$GUM_WRITE_PLACEHOLDER)
--prompt=\"‚îÉ \"                       Prompt to display (\$GUM_WRITE_PROMPT)
--show-cursor-line                  Show cursor line (\$GUM_WRITE_SHOW_CURSOR_LINE)
--show-line-numbers                 Show line numbers (\$GUM_WRITE_SHOW_LINE_NUMBERS)
--value=\"\"                          Initial value (can be passed via stdin) (\$GUM_WRITE_VALUE)
--char-limit=400                    Maximum value length (0 for no limit)
--cursor.mode=\"blink\"               Cursor mode (\$GUM_WRITE_CURSOR_MODE)
--base.foreground=\"\${c}\"                Foreground Color (\$GUM_WRITE_BASE_FOREGROUND)
--cursor-line-number.foreground=\"\${c}\"  Foreground Color (\$GUM_WRITE_CURSOR_LINE_NUMBER_FOREGROUND)
--cursor-line.foreground=\"\${c}\"         Foreground Color (\$GUM_WRITE_CURSOR_LINE_FOREGROUND)
--cursor.foreground=\"\${c}\"              Foreground Color (\$GUM_WRITE_CURSOR_FOREGROUND)
--end-of-buffer.foreground=\"\${c}\"       Foreground Color (\$GUM_WRITE_END_OF_BUFFER_FOREGROUND)
--line-number.foreground=\"\${c}\"         Foreground Color (\$GUM_WRITE_LINE_NUMBER_FOREGROUND)
--header.foreground=\"\${c}\"              Foreground Color (\$GUM_WRITE_HEADER_FOREGROUND)
--placeholder.foreground=\"\${c}\"         Foreground Color (\$GUM_WRITE_PLACEHOLDER_FOREGROUND)
--prompt.foreground=\"\${c}\"              Foreground Color (\$GUM_WRITE_PROMPT_FOREGROUND)" | gum filter --no-fuzzy --header "Choosed: $(cat ${tmp})" --height ${h})
	ch=$(echo ${choice} | cut -d' ' -f1)
	if [ ${ch} == 'ENOUGH' ]; then
		echo -e "\n" >> ${tmp}
		echo -e "\nUsing:\n gum $(cat ${tmp})\n"
		arguments=($(cat ${tmp}))
		gum "${arguments[@]}" #"$(gum file --file=no --directory)"
	else
		echo -n "${ch} " >> ${tmp}
		write_menu
	fi
}

#### TEMPLATE ####
# for adding (probably not needed anymore)
gum_X() {
	tmp="$tmpdir/tmp-X"
	headertext="
Choosed: $(cat ${tmp})"
	h=X
	choice=$(echo "\
ENOUGH back to main menu  Stop choosing X
X" | gum filter --no-fuzzy --header "Choosed: $(cat ${tmp})" --height ${h})
	ch=$(echo ${choice} | cut -d' ' -f1)
	if [ ${ch} == 'ENOUGH' ]; then
		echo -e "\nUsing:\n gum $(cat ${tmp})\n"
		arguments=($(cat ${tmp}))
		gum "${arguments[@]}" XXXX #"$(gum file --file=no --directory)"
	else
		echo -n "${ch} " >> ${tmp}
		gum_X
	fi
}

#### RESULT ####
show_results() {
	temps=($(ls ${tmpdir}/tmp-* 2>/dev/null))
	echo '' > ${tmpdir}/tmp
	for temp in "${temps[@]}"; do
		if [ -f "$temp" ]; then
			cat "$temp" >> ${tmpdir}/tmp
		fi
	done
	echo -e "\n\nUsed: (Probably need more work from you...)\n\n $(cat ${tmpdir}/tmp)\n"
}

#### MENU loop & run & case ####
while true
do
	gum_
	case "${ch}" in
		CLEAR)   clear_tmps;;
		choose)  choose_header;header;choose_menu;;
		confirm) confirm_header;header;confirm_menu;;
		file)    file_header;header;file_menu;;
		filter)  filter_header;header;filter_menu;;
		format)  format_header;header;format_menu;;
		input)   input_header;header;input_menu;;
		join)    join_header;header;join_menu;;
		pager)   pager_header;header;pager_menu;;
		spin)    spin_header;header;spin_menu;;
		style)   style_header;header;style_menu;;
		table)   table_header;header;table_menu;;
		write)   write_header;header;write_menu;;
		log)     log_header;header;log_menu;;
		HELP)    _help_me;;
		EXIT)    show_results && exit 0;;
	esac
done
